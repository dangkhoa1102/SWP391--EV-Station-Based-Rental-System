using Microsoft.EntityFrameworkCore;
using System.Security.Cryptography;
using System.Text;
using Monolithic.Data;
using Monolithic.Models;
using Monolithic.Services.Interfaces;

namespace Monolithic.Services.Implementation
{
    public class UserService : IUserService
    {
        private readonly EVStationBasedRentalSystemDbContext _context;

        public UserService(EVStationBasedRentalSystemDbContext context)
        {
            _context = context;
        }

        public async Task<User?> FindByEmailAsync(string email)
        {
            return await _context.Users.FirstOrDefaultAsync(u => u.Email == email);
        }

        public async Task<User?> FindByIdAsync(string id)
        {
            // Convert string id to Guid for UserId lookup
            if (Guid.TryParse(id, out var userId))
            {
                return await _context.Users.FirstOrDefaultAsync(u => u.UserId == userId);
            }
            return null;
        }

        public async Task<bool> CreateUserAsync(User user, string password)
        {
            try
            {
                user.PasswordHash = HashPassword(password);
                // UserId will be auto-generated by the model's default value
                if (user.UserId == Guid.Empty)
                {
                    user.UserId = Guid.NewGuid();
                }
                user.CreatedAt = DateTime.UtcNow;

                _context.Users.Add(user);
                await _context.SaveChangesAsync();
                return true;
            }
            catch
            {
                return false;
            }
        }

        public Task<bool> CheckPasswordAsync(User user, string password)
        {
            return Task.FromResult(VerifyPassword(password, user.PasswordHash ?? ""));
        }

        public async Task<bool> ChangePasswordAsync(User user, string currentPassword, string newPassword)
        {
            if (!VerifyPassword(currentPassword, user.PasswordHash ?? ""))
                return false;

            user.PasswordHash = HashPassword(newPassword);
            user.UpdatedAt = DateTime.UtcNow;

            _context.Users.Update(user);
            await _context.SaveChangesAsync();
            return true;
        }

        public async Task<bool> UpdateUserAsync(User user)
        {
            try
            {
                user.UpdatedAt = DateTime.UtcNow;
                _context.Users.Update(user);
                await _context.SaveChangesAsync();
                return true;
            }
            catch
            {
                return false;
            }
        }

        private static string HashPassword(string password)
        {
            using var sha256 = SHA256.Create();
            var salt = Guid.NewGuid().ToString();
            var hashedBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(password + salt));
            return Convert.ToBase64String(hashedBytes) + ":" + salt;
        }

        private static bool VerifyPassword(string password, string hashedPassword)
        {
            if (string.IsNullOrEmpty(hashedPassword))
                return false;

            var parts = hashedPassword.Split(':');
            if (parts.Length != 2)
                return false;

            var hash = parts[0];
            var salt = parts[1];

            using var sha256 = SHA256.Create();
            var hashedBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(password + salt));
            var newHash = Convert.ToBase64String(hashedBytes);

            return hash == newHash;
        }
    }
}